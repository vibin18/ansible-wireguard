- name: Register if config/private key already exists on target host
  stat:
    path: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
  register: wireguard__register_config_file

- name: Generate WireGuard private key
  command: "wg genkey"
  register: wireguard__register_private_key
  changed_when: false

- name: Set private key fact
  set_fact:
    wireguard_private_key: "{{ wireguard__register_private_key.stdout }}"
  when:
    - not wireguard__register_config_file.stat.exists

- name: Set private key fact
  set_fact:
    wireguard_private_key: "{{ wireguard__register_config['content'] | b64decode | regex_findall('PrivateKey = (.*)') | first }}"
  when:
    - wireguard__register_config_file.stat.exists
    - wireguard_private_key is not defined

- name: Derive WireGuard public key
  command: "wg pubkey"
  args:
    stdin: "{{ wireguard_private_key }}"
  register: wireguard__register_public_key
  changed_when: false
  check_mode: no

- name: Set public key fact
  set_fact:
    wireguard__fact_public_key: "{{ wireguard__register_public_key.stdout }}"

- name: Create WireGuard configuration directory
  file:
    dest: "{{ wireguard_remote_directory }}"
    state: directory
    mode: 0700

- name: Generate WireGuard configuration file
  template:
    src: "/{{ lookup('env', 'PWD') }}/roles/wg-setup/files/wg.j2"
    dest: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
    owner: "{{ wireguard_conf_owner }}"
    group: "{{ wireguard_conf_group }}"
    mode: "{{ wireguard_conf_mode }}"

- name: Start and enable WireGuard service
  service:
    name: "wg-quick@{{ wireguard_interface }}"
    state: started
    enabled: yes